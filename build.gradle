plugins {
    id 'org.springframework.boot' version '2.1.5.RELEASE'
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id "io.freefair.lombok" version '3.6.4'
    id 'java'
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.31"
    id "com.palantir.docker" version "0.22.1"
}
repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/spekframework/spek" }
}

lombok.config['lombok.anyConstructor.addConstructorProperties'] = 'true'

sourceCompatibility = 11
targetCompatibility = 11

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    runtime("io.micrometer:micrometer-registry-prometheus")
    implementation("org.springframework.retry:spring-retry")
    runtime('org.springframework.boot:spring-boot-starter-aop')
    implementation("io.springfox:springfox-swagger2:2.9.2")
    implementation("io.springfox:springfox-swagger-ui:2.9.2")
    implementation("commons-beanutils:commons-beanutils:1.9.3")
    implementation("javax.xml.bind:jaxb-api:2.3.1")
    implementation("javax.activation:activation:1.1.1")
    implementation("org.glassfish.jaxb:jaxb-runtime:2.3.1")
    implementation("net.logstash.logback:logstash-logback-encoder:6.0")
    implementation("net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude module: "junit"
        exclude module: "mockito-core"
    }
    testImplementation("org.junit.jupiter:junit-jupiter:5.4.2")
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:2.0.5"
    testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:2.0.5"
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    testImplementation("com.ninja-squad:springmockk:1.1.2")
}
test {
    useJUnitPlatform {
        includeEngines 'spek2','junit-jupiter'
    }
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}
docker {
    name "${project.group}19/${project.name}:${project.version}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}